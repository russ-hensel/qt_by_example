

This application is intended to demo/document code working with
Qt Widgets, Qt Sql Widgets, and closely related objects.


----------------------- Table of Contents -----------------

---- GUI

---- Help

---- QTSql

---- Purpose/Functionality
---- Tracing the code
---- QtWidgets

---- qt_sql_widges -- work in pipeline

---- QtWidgets Old
---- Code Style
---- Parameters

--------------------------------------------------------

----Purpose/Functionality--------------------------------------------------------------------------

This application in intended to show how to use Qt widgets largely through
a running application, inspectiong the code behind it, and some documentation ( like this file ).

Most of the widgets have some visual aspect, but especially for the sql widgets
they also have some important non visual aspects.  The code should illustrate
both.

Use of widgets involves several different programming aspects:

    Widget creation and the setting of widget properties.  These
    properties govern widget appearance and behavior.

    Connection widget events to actions

    Reading of widget state, getting information about the widgets.

    Placement of the widgets on windows.

All of this involves a lot of code.  We will illustrate as much of it
as we have energy for, hopefully what is here will be useful to you.

The widgets have been divided into group that are shown on an individual
tab.  Some tabs illustrate more than one type of widget.  In some cases
a single widget may be shown on more than one tab.

Each tab is itself a descendant of QWidget and coded in its own class.
Hopefully this keep the code for a single widget in a fairly small easy
to understand space.

Of course to illustrate the use of widgets we need to use some widget
to "hold" our illustrations.  This code may also be of use.  For example
the construction of tabs is illustrated by the framework of this application

Individual tabs ( sometime as their own classes extended from QWidget )
illustrating the use of some   widgets.

May be detailed help on each tab.

There are also other helper classes defined, use find to find where used.

----GUI--------------------------------------------------------------------------

Each topic gets its own tab which is coded in its own object
to make examination of the code easier than if this whole thing
was in one giant namespace.

Each Tab has its own help file, this this the General Help for all
the tabs.

I doubt this application will ever be "finished".  Separator
tabs, from left to right, indicate how finished a tab is:

    Done:   done for now
    Draft:  some things work
    TBD:    to be done, tab exists, but functionally may have nothing
    PHold:  a place holder just an idea so fa


When you interact with the application a lot of what happens is sent
to your python console.  Try to size and position the application
so you can see the output to the console.

Typical Tab Functionality:

    Usually a tab displays some widgets of interest and some buttons
    to interact with underlying objects.  The buttons are often labeled
    with the name of the function they call, this is a bit ugly but
    makes it easier to find the code called by the button.

    Common buttons

        print something

        mutate something

        inspect

        breakpoint

    A lot of actions cause output to the console, typically the function
    causing this will print something like:
         ------------ print_db ------------
    where the name of the function ( in the tab ) is: print_db
    this should make it easy to find the code.

---- Help ------------------------

    From the menu in the upper left of each window are submenus for
    access to help

        .... General Help ... this document
        .... CurrentTab Help ... help about the tabpage that is open

            Readme.MD
            Developer Notes

    A feature of tthe current tab Help is the section called:
        Ask a ChatBot -- these are questions that a chatbot can be
                         asked to give you further insight


---- Tracing the code

    Each tabpage is its own object typically only 300 to 600 lines, and divided into
    many methods.

    When you interact watch the gui, and check the console.

    If you wonder why the tab page looks the way it does see _build_gui()
        in other words to see how the object is built see:  _build_gui for the object

    The coding style is on the verbose side to make things clear, the formatting is
    nonstandard, run black or something on it if you want. ( you need not tell me how wrong I am )

    I have tried to be consistent in naming so that function describe what they do, or
    what triggered them.

    Name attempt to be consistent so once you learn your way around one tab it should
    help with other tabs.

    Generally there are methods that are run when:
        You push a button
        You click or right click an object

        see the individual help for each object

    Other methods have name that are pretty good giveaways as to what they do.

    Methods often execute something like:

        print_func_header( "mutate" )
        where this argument is the name of the method, should make finding code easy.

---- qt_sql_widges -- work in pipeline

        * still need to extract all tabs to their own modules
        * lots of code in old modules needs to be refactored in
        * still a lot of general cleanup

---- qt_widges -- work in pipeline

        * widget coverage is low
        * still need to extract all tabs to their own modules

==== Widgets -- move me


        QSqlDatabase     non visual widget for database connections
                QSqlDatabase tab
                    in SampleDB object

        QSqlTableModel
        QTableView        used to view  QSqlTableModel
                QSqlTableModel tab

        QSqlRelationalTableModel
             QTableView  use to view QSqlRelationalTableModel






----Code Style--------------------------------------------------------------------------

    The code style is formatted the way i like it, far from PEP 8, run black... on it if you want.

    The style is a bit pedantic, some code could be more compact, I am going for clarity here.

    I have tried to use good names.... to make the code friendly to cut and paste...


----QTSql--------------------------------------------------------------------------

About QT SQL Widgets

    The QT SQL widgets implement a ORM for a database in a version
    of a Model View setup.

    That is the database is accessed trough some sort of object ( the ORM )
    and often viewed through another object the view.

    So for example the TableModel is an ORM to a single table and
    the TableView is a widget that makes the TableModel visible

    see:




!! need to build these indices into this help.


by use Choosing a widget

    Select data from a single table and display



    Select data to use in variables

            QQuery ??

by widget

    QTableWidget

        Holds and display data without any SQL
        interface, does not need a view

    QTableView
        build_tvrmd_tab

    QSqlQueryModel
        not yet
        seems to run a query can we loop thru one at a time

    QSqlTableModel
         !!QSqlTableModel with Pagination:

        If you still want to use a model for display but are concerned about loading all rows into


      memory at once, you can implement pagination. This involves querying and displaying only a           subset        of rows at a time.

     by tab


    build_tvrmd_tab

        QSqlRelationalTableModel
        QTableView


    build_wmc_tab

        QSqlTableModel


---- Parameters
    Some aspects of the program are controlled by a module called parameters ( parameters.py )
    For now the documentation of the parameters is in the code of the module.

    It is eary in this process much is broken



----QtWidgets

----QtWidgets Old


This is a little app to demonstrate in a compact way the code used for pyqt Graphical User Interface Widgets.




Overall App Illustrates:
    Illustrates:
        A main window  ( code in: QtWidgetExamplesInTabs or whatever i decide is a better name )
        TabNotebook with a lot of individual tabs
            Tabs show the ability to create, name, move, and close
            plus other stuff shown in the code.





Individual Tabs:

    Each illustrates one or more widgets in a Tab.  Tabs are implemented as individual classes
    to make the code easy to search.

    Each tab is documented internally by comments, by text printed to the console when you
    interact with the tab, and by a text file document, like this, for each tab.

    Most tabs have buttons for:

        Mutating the objects.

        Inspecting the objects.
        Breakpoint, breaking into the debugger in the objects code.


Buttons:
    text may be on 2 lines to save horizontal space
    if lower case with underscores they the text is the method name being called




Reading the code:

    Since these are gui elements much of the info you need will be found in the widget method
    build_gui

    I sometimes have a Search comment at the top of the code to help you find code of interest







            Try them, and read the docs for more information.








================= eof ===============
